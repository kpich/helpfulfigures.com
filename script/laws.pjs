/*
 @pjs preload="/img/laws/bible_active.png";
      preload="/img/laws/bible_inactive.png";
      preload="/img/laws/cheney_active.png";
      preload="/img/laws/cheney_inactive.png";
      preload="/img/laws/document_active.png";
      preload="/img/laws/document_inactive.png";
      preload="/img/laws/dollar_active.png";
      preload="/img/laws/dollar_inactive.png";
      preload="/img/laws/gavel_active.png";
      preload="/img/laws/gavel_inactive.png";
      preload="/img/laws/skinlaw_active.png";
      preload="/img/laws/skinlaw_inactive.png";
      preload="/img/laws/whitehouse_active.png";
      preload="/img/laws/whitehouse_inactive.png";
      preload="/img/laws/l_arr.png";
      preload="/img/laws/r_arr.png";
 */

/* 2010, Karl Pichotta.
    Use this code however you want.
    If you use the "content" (anything stored in the variable BOXES), then attribute it to me. kthxbai.
*/


float IMG_WIDTH = 100;
float IMG_HEIGHT = 101;
float ARR_WIDTH = 50;
float ARR_HEIGHT = 75;
Coord[] COORDS = [
    new Coord(19,  20),
    new Coord(156, 20),
    new Coord(293, 20),
    new Coord(430, 20),
    new Coord(567, 20),
    new Coord(704, 20),
    new Coord(841, 20),
];

L_ARR_COORD = new Coord(50, 200);
R_ARR_COORD = new Coord(860, 200);

int NUM_IMGS = 7;
PImage [] activeimgs = new PImage[NUM_IMGS];
PImage [] inactiveimgs = new PImage[NUM_IMGS];
PImage lArr;
PImage rArr;

int curDimensionNum = 0;

boolean needRedraw = true;
int curActiveIndex = 0;

void setup() {
    activeimgs[0]   = loadImage("/img/laws/document_active.png");
    inactiveimgs[0] = loadImage("/img/laws/document_inactive.png");
    activeimgs[1]   = loadImage("/img/laws/bible_active.png");
    inactiveimgs[1] = loadImage("/img/laws/bible_inactive.png");
    activeimgs[2]   = loadImage("/img/laws/dollar_active.png");
    inactiveimgs[2] = loadImage("/img/laws/dollar_inactive.png");
    activeimgs[3]   = loadImage("/img/laws/cheney_active.png");
    inactiveimgs[3] = loadImage("/img/laws/cheney_inactive.png");
    activeimgs[4]   = loadImage("/img/laws/whitehouse_active.png");
    inactiveimgs[4] = loadImage("/img/laws/whitehouse_inactive.png");
    activeimgs[5]   = loadImage("/img/laws/skinlaw_active.png");
    inactiveimgs[5] = loadImage("/img/laws/skinlaw_inactive.png");
    activeimgs[6]   = loadImage("/img/laws/gavel_active.png");
    inactiveimgs[6] = loadImage("/img/laws/gavel_inactive.png");
    lArr = loadImage("/img/laws/l_arr.png");
    rArr = loadImage("/img/laws/r_arr.png");
    size(960, 520);
    showAppropriateLabel();
}

void draw() {
    if(needRedraw) {
        needRedraw = false;
        background(255);
	showAppropriateLabel();
	highlightAppropriateImages();
	drawArrows();
    }

}

void mouseClicked() {
    int ind = getClickedImgIndex();
    if(ind != -1) {
	curActiveIndex = ind;
	needRedraw = true;
    }
    else if(clickingLeftArrow()) {
	curActiveIndex -= 1;
	if(curActiveIndex < 0) curActiveIndex += NUM_IMGS;
	needRedraw = true;
    }
    else if(clickingRightArrow()) {
	curActiveIndex = (curActiveIndex + 1) % NUM_IMGS;
	needRedraw = true;
    }
}

void showAppropriateLabel() {
    for(int i = 0; i < NUM_IMGS; i++)
	document.getElementById('sec' + i).style.display= "none";
    if(curActiveIndex != -1)
	document.getElementById('sec' + curActiveIndex).style.display="block";
}

void highlightAppropriateImages() {
    for(int i = 0; i < NUM_IMGS; i++) {
	if(i == curActiveIndex) {
	    image(activeimgs[i], COORDS[i].x, COORDS[i].y);
	}
	else {
	    image(inactiveimgs[i], COORDS[i].x, COORDS[i].y);
	}
    }
}

boolean clickingLeftArrow() {
    return (
	mouseX > L_ARR_COORD.x &&
	mouseX < L_ARR_COORD.x + ARR_WIDTH &&
	mouseY > L_ARR_COORD.y &&
	mouseY < L_ARR_COORD.y + ARR_HEIGHT);
}

boolean clickingRightArrow() {
    return (
	mouseX > R_ARR_COORD.x &&
	mouseX < R_ARR_COORD.x + ARR_WIDTH &&
	mouseY > R_ARR_COORD.y &&
	mouseY < R_ARR_COORD.y + ARR_HEIGHT);
}

void drawArrows() {
    image(lArr, L_ARR_COORD.x, L_ARR_COORD.y);
    image(rArr, R_ARR_COORD.x, R_ARR_COORD.y);
}

int getClickedImgIndex() {
    for(int i = 0; i < COORDS.length(); i++) 
	if(COORDS[i].pointWithinImg(mouseX, mouseY)) return i;
    return -1
}

class Coord {
    int x;
    int y;
    Coord(int x, int y) {
	this.x = x;
	this.y = y;
    }

    boolean pointWithinImg(float pX, float pY) {
	return (pX > x &&
		pX < x + IMG_WIDTH &&
		pY > y &&
		pY < y + IMG_HEIGHT);
    }
}
